(defmodule List
  (defndynamic find-index [l pred]
    (cond
      (empty? l) '()
      (pred (car l)) 0
      (let [res (List.find-index (cdr l) pred)]
        (if (nil? res)
          res
          (inc res)))))
)

(defmodule OrderedTree
  (defndynamic init [] (list '() {}))

  (defndynamic length [t] (length (car t)))

  (defndynamic put [t ks v]
    (cond
      (empty? ks) (macro-error "defn-match found multiple empty argument lists.")
      (= (length ks) 1)
        (let [tkeys (car t)
              tmap (cadr t)]
          (list (cons-last (car ks) tkeys) (Map.put tmap (car ks) v)))
      (let [tkeys (car t)
            tmap (cadr t)
            k (car ks)]
        (if (Map.contains? tmap k)
          (list (cons-last k tkeys)
            (Map.update tmap k
              (fn [t] (OrderedTree.put t (cdr ks) v))))
          (list (cons-last k tkeys)
            (Map.put tmap k
              (OrderedTree.put (OrderedTree.init) (cdr ks) v)))))))

  (defndynamic reduce [t f acc]
    (reduce f acc (map (fn [k] (list k (Map.get (cadr t) k))) (car t))))
)

(defmodule MatchUtils
  (defndynamic pairs [l]
    (if (< (length l) 2)
      '()
      (cons (list (car l) (cadr l)) (MatchUtils.pairs (cddr l)))))

  (defndynamic let-match- [bindings body]
    (cond
      (empty? bindings) body
      (= (length bindings) 1)
        (macro-error
          (list "malformed bindings in let-match: the number of forms must be even, but I found a trailing " (car bindings)))
      `(match %(cadr bindings)
        %(car bindings) %(MatchUtils.let-match- (cddr bindings) body)
        _ ())))

  (defmacro let-match [bindings body]
    (MatchUtils.let-match- bindings body))

  (defndynamic deep-put [acc form]
    (let [args (car form)
          binding (cadr form)]
      (if (empty? args)
        (macro-error "defn-match encountered an empty argument list.")
        (OrderedTree.put acc args binding))))

  (defndynamic sort-forms [forms]
    (reduce MatchUtils.deep-put (OrderedTree.init) forms))

  (defndynamic match-body [args forms]
    (if (empty? args)
      forms
      ; TODO: special case for literals instead of sumtypes
      (if (and (= (OrderedTree.length forms) 1) (symbol? (caar forms)))
        ; special case: a single var binding
        (let [var (caar forms)]
          `(let [%var %(car args)]
             %(MatchUtils.match-body (cdr args) (Map.get (cadr forms) var))))
        `(match %(car args)
            %@(OrderedTree.reduce
                forms
                (fn [acc p]
                  (append acc (cons (car p) (list (MatchUtils.match-body (cdr args) (cadr p))))))
                '())))))

  (defndynamic check-length [lens]
    (let [a (car lens)]
      (unless (all? (curry = a) (cdr lens))
        (macro-error
          (list "defn-match expected all argument lists to be of length " a ".")))))

  (defmacro defn-match [name :rest forms]
    (cond
      (empty? forms)
        (macro-error "defn-match must contain at least one pair of arguments and body after the name.")
      (= (imod (length forms) 2) 1)
        (macro-error "defn-match must contain pairs of arguments and body after the name, but got an odd number of forms.")
      (= (length forms) 2) ; special case for simple defn
        (eval `(defn %name %@forms))
      (let-do [args (collect-into (map (fn [_] (gensym)) (car forms)) array)
               ; sort args here
               paired (MatchUtils.pairs forms)]
        (MatchUtils.check-length (map (fn [p] (length (car p))) paired))
        (eval
          `(defn %name %args
            %(MatchUtils.match-body args
              (MatchUtils.sort-forms paired)))))))
)

(deftype Num
  (I [Int])
  (D [Double]))

(use Num)
(MatchUtils.defn-match add-num
  [(I x) (I y)] (I (+ x y))
  [(D x) (D y)] (D (+ x y))
  [(D x) (I y)] (D (+ x (from-int y)))
  [(I x) (D y)] (D (+ (from-int x) y)))
